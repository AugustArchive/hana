{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u82b1 - \"hana\" hana is an API service made for Noel 's projects and proxy services. It contains the following: Image Endpoints (red pandas, polar bears, and much more!) Image Manipulation (making an image round, cropping an image, and more!) Proxy Services GitHub Sponsors - Grab any user's sponsors from a simple API endpoint without grabbing it from GitHub's GraphQL API! Changelog 1.x This is the initial release of api.floofy.dev , originally under the domain api.augu.dev ! This was written in pure JavaScript to include a Sentry webhook (to create issues then posts it in a channel on Discord). hana (originally api.augu.dev ), was only made to be a GitHub sponsors proxy to show a list of my sponsors! 2.x hana v2 was the \"brand new\" improved version of hana , still under api.augu.dev but swiftly moved to Kotlin with the Vert.x framework, and introduced new images endpoints, that's pretty much it. Currently, v3 is the only supported API version, but v2 will deprecate and will be retired in December 12th, 2022. 3.x hana v3 was a very new improvement towards the hana core, only being a proxy service for GitHub sponsors and image endpoints. But, the image endpoints were no longer handled by the disk, it was handled by Amazon S3 ! 4.x This is the current version that you are seeing (as of 03/03/22 ) and brings image manipulation endpoints, this API page you see, and API keys. You can register an API key in the Noelware Discord server under the #commands channel using the /api-key create command! Since some image endpoints are NSFW , by default, the NSFW endpoints are LOCKED AND MUST BE EXPLICITLY ENABLED BY THE USER REGISTERING! I am not held responsible if a minor has access to this API since it has been discussed that it is 18+ only since I do not want to bring in a system to verify users' API keys by their IDs, passports, etc since that is very insecure and dangerous to give out in the first place.","title":"\u82b1 - \"hana\""},{"location":"#-hana","text":"hana is an API service made for Noel 's projects and proxy services. It contains the following: Image Endpoints (red pandas, polar bears, and much more!) Image Manipulation (making an image round, cropping an image, and more!) Proxy Services GitHub Sponsors - Grab any user's sponsors from a simple API endpoint without grabbing it from GitHub's GraphQL API!","title":"\u82b1 - \"hana\""},{"location":"#changelog","text":"","title":"Changelog"},{"location":"#1x","text":"This is the initial release of api.floofy.dev , originally under the domain api.augu.dev ! This was written in pure JavaScript to include a Sentry webhook (to create issues then posts it in a channel on Discord). hana (originally api.augu.dev ), was only made to be a GitHub sponsors proxy to show a list of my sponsors!","title":"1.x"},{"location":"#2x","text":"hana v2 was the \"brand new\" improved version of hana , still under api.augu.dev but swiftly moved to Kotlin with the Vert.x framework, and introduced new images endpoints, that's pretty much it. Currently, v3 is the only supported API version, but v2 will deprecate and will be retired in December 12th, 2022.","title":"2.x"},{"location":"#3x","text":"hana v3 was a very new improvement towards the hana core, only being a proxy service for GitHub sponsors and image endpoints. But, the image endpoints were no longer handled by the disk, it was handled by Amazon S3 !","title":"3.x"},{"location":"#4x","text":"This is the current version that you are seeing (as of 03/03/22 ) and brings image manipulation endpoints, this API page you see, and API keys. You can register an API key in the Noelware Discord server under the #commands channel using the /api-key create command! Since some image endpoints are NSFW , by default, the NSFW endpoints are LOCKED AND MUST BE EXPLICITLY ENABLED BY THE USER REGISTERING! I am not held responsible if a minor has access to this API since it has been discussed that it is 18+ only since I do not want to bring in a system to verify users' API keys by their IDs, passports, etc since that is very insecure and dangerous to give out in the first place.","title":"4.x"},{"location":"endpoints/","text":"\u82b1 - Endpoints This is a list of curated endpoints that you can use today! This doesn't discuss the topics of authentication, ratelimiting, and such, please read the reference guide! GET / Returns the main response, which isn't nothing fancy. JSON Response 200: OK { \"success\": true, \"data\": { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" } } GET /v{version} Returns the main response for any versioned endpoint JSON Response [v2] 200: OK { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" } JSON Response [v3] 200: OK { \"success\": true, \"data\": { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" } } GET /metrics Returns the metrics scraped from the main service Response Since the metrics service is enabled only on the main instance (used for monitoring), it will return a 404 Not Found status code or a 200 OK status code with all the metrics scraped. GET /health Returns a simple response of \"OK\" if the server is healthy Response 200 OK: OK GET /api/sponsors/{login} Returns a list of sponsors for the given \"login\" that you provide. Request Parameters Name Type Required? Description {login} String True The user on GitHub to retrieve sponsors. ?pricing= Enum (\"dollars\", \"cents\") False Returns what pricing we should use when the data is fetched. ?private= Boolean False If private sponsors should be included. Response 200 OK: { \"success\": Boolean, \"data\": GitHubSponsorMetadata[] }","title":"\u82b1 - Endpoints"},{"location":"endpoints/#-endpoints","text":"This is a list of curated endpoints that you can use today! This doesn't discuss the topics of authentication, ratelimiting, and such, please read the reference guide!","title":"\u82b1 - Endpoints"},{"location":"endpoints/#get","text":"Returns the main response, which isn't nothing fancy.","title":"GET /"},{"location":"endpoints/#json-response","text":"200: OK { \"success\": true, \"data\": { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" } }","title":"JSON Response"},{"location":"endpoints/#get-vversion","text":"Returns the main response for any versioned endpoint","title":"GET /v{version}"},{"location":"endpoints/#json-response-v2","text":"200: OK { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" }","title":"JSON Response [v2]"},{"location":"endpoints/#json-response-v3","text":"200: OK { \"success\": true, \"data\": { \"message\": \"Hello, world!\", \"docsUri\": \"https://api.floofy.dev/docs/\" } }","title":"JSON Response [v3]"},{"location":"endpoints/#get-metrics","text":"Returns the metrics scraped from the main service","title":"GET /metrics"},{"location":"endpoints/#response","text":"Since the metrics service is enabled only on the main instance (used for monitoring), it will return a 404 Not Found status code or a 200 OK status code with all the metrics scraped.","title":"Response"},{"location":"endpoints/#get-health","text":"Returns a simple response of \"OK\" if the server is healthy","title":"GET /health"},{"location":"endpoints/#response_1","text":"200 OK: OK","title":"Response"},{"location":"endpoints/#get-apisponsorslogin","text":"Returns a list of sponsors for the given \"login\" that you provide.","title":"GET /api/sponsors/{login}"},{"location":"endpoints/#request-parameters","text":"Name Type Required? Description {login} String True The user on GitHub to retrieve sponsors. ?pricing= Enum (\"dollars\", \"cents\") False Returns what pricing we should use when the data is fetched. ?private= Boolean False If private sponsors should be included.","title":"Request Parameters"},{"location":"endpoints/#response_2","text":"200 OK: { \"success\": Boolean, \"data\": GitHubSponsorMetadata[] }","title":"Response"},{"location":"reference/","text":"\u82b1 / Reference This is a reference sheet on how to use hana with your application, if you want to! hana is only consisted with one HTTP layer, which is the REST layer. Versions hana has a lot of growth during 2019, when the project was first created, and the data structure of any API request has changed from that period forward, hana is split into many API versions that are pretty much deprecated instead of the default (v3): \u2764\ufe0f indicates that this API version is no longer supported. \ud83d\udc9b indicates that this API version is deprecated and will be removed in a major release. \ud83d\udc9a indicates that this API version is healthy and is receiving updates. API Version Supported /api/v1 \u2764\ufe0f /api/v2 \ud83d\udc9b /api/v3 \ud83d\udc9a REST Endpoints https://api.floofy.dev CDN Endpoints https://cdn.floofy.dev Authentication Some routes require authentication to execute them, you will need to join the Noelware Discord server to register one to link it your Discord account! You can execute the /create-key slash command that is available: You are only required to have an application name to uniquely identify one. At this moment of time, you are only allowed to create one application. Once you register an API key, you will get a success message: You will get a few warnings if nsfw_enabled or im_enabled was set to true: You will also receive an embed about the application you created: Now we are all set to execute API requests to endpoints that have the \"[Authorization]\" suffix. To use the JWT that hana generated, you can set it in the \"Authorization\" HTTP Header: Authorization: Bearer <token> Ratelimiting hana is no different from any other applications, to handle the load of any request from a user, hana has API ratelimiting implemented into the application itself. It will be handled before the request call was ever executed internally. You will receive the following headers in any request you send: X-RateLimit-Limit: 1200 X-RateLimit-Reset: ... X-RateLimit-Remaining: ... X-RateLimit-Reset-Date: ... The following headers detail about the request's ratelimit. This table will describe what endpoints will be ratelimited: Endpoint Limit Reasoning IP/API Key? non-im endpoints (without api key) 1200 per hour This is the default ratelimits for any non-image manipulation endpoints. IP image manipulation 250 per minute Since this can take up CPU or memory usage, this is ratelimited very strictly . API Key non-im endpoints (with api key) 2500 per hour Since you are probably most careful with any endpoints you execute with an API key, this has been tailored to be very lax. API Key","title":"\u82b1 / Reference"},{"location":"reference/#reference","text":"This is a reference sheet on how to use hana with your application, if you want to! hana is only consisted with one HTTP layer, which is the REST layer.","title":"\u82b1 / Reference"},{"location":"reference/#versions","text":"hana has a lot of growth during 2019, when the project was first created, and the data structure of any API request has changed from that period forward, hana is split into many API versions that are pretty much deprecated instead of the default (v3): \u2764\ufe0f indicates that this API version is no longer supported. \ud83d\udc9b indicates that this API version is deprecated and will be removed in a major release. \ud83d\udc9a indicates that this API version is healthy and is receiving updates. API Version Supported /api/v1 \u2764\ufe0f /api/v2 \ud83d\udc9b /api/v3 \ud83d\udc9a","title":"Versions"},{"location":"reference/#rest-endpoints","text":"https://api.floofy.dev","title":"REST Endpoints"},{"location":"reference/#cdn-endpoints","text":"https://cdn.floofy.dev","title":"CDN Endpoints"},{"location":"reference/#authentication","text":"Some routes require authentication to execute them, you will need to join the Noelware Discord server to register one to link it your Discord account! You can execute the /create-key slash command that is available: You are only required to have an application name to uniquely identify one. At this moment of time, you are only allowed to create one application. Once you register an API key, you will get a success message: You will get a few warnings if nsfw_enabled or im_enabled was set to true: You will also receive an embed about the application you created: Now we are all set to execute API requests to endpoints that have the \"[Authorization]\" suffix. To use the JWT that hana generated, you can set it in the \"Authorization\" HTTP Header: Authorization: Bearer <token>","title":"Authentication"},{"location":"reference/#ratelimiting","text":"hana is no different from any other applications, to handle the load of any request from a user, hana has API ratelimiting implemented into the application itself. It will be handled before the request call was ever executed internally. You will receive the following headers in any request you send: X-RateLimit-Limit: 1200 X-RateLimit-Reset: ... X-RateLimit-Remaining: ... X-RateLimit-Reset-Date: ... The following headers detail about the request's ratelimit. This table will describe what endpoints will be ratelimited: Endpoint Limit Reasoning IP/API Key? non-im endpoints (without api key) 1200 per hour This is the default ratelimits for any non-image manipulation endpoints. IP image manipulation 250 per minute Since this can take up CPU or memory usage, this is ratelimited very strictly . API Key non-im endpoints (with api key) 2500 per hour Since you are probably most careful with any endpoints you execute with an API key, this has been tailored to be very lax. API Key","title":"Ratelimiting"}]}